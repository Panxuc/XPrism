#ifndef ICONS_GPA
#define ICONS_GPA

#include "lvgl.h"

#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_GPA_0
#define LV_ATTRIBUTE_IMG_GPA_0
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_0 uint8_t GPA_0_map[] = {
  0x42, 0x42, 0x42, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0x00, 	/*Color of index 1*/
  0x00, 0x00, 0x00, 0x00, 	/*Color of index 2*/
  0x00, 0x00, 0x00, 0x00, 	/*Color of index 3*/

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const lv_img_dsc_t GPA_0 = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_0_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_A
#define LV_ATTRIBUTE_IMG_GPA_A
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_A uint8_t GPA_A_map[] = {
  0xe2, 0xfa, 0xfd, 0xff, 	/*Color of index 0*/
  0xa9, 0xf1, 0xfb, 0xff, 	/*Color of index 1*/
  0x6c, 0xe6, 0xfa, 0xff, 	/*Color of index 2*/
  0x3b, 0xd9, 0xf8, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x40, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x01, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x02, 0x00, 0x2f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x02, 0x80, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x03, 0x80, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x07, 0xc0, 0x0b, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd0, 0x0b, 0xd0, 0x0b, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x0b, 0xd0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x1f, 0xf0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x2f, 0xf4, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x3f, 0xf8, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0x00, 0x3f, 0xfc, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0x00, 0xbf, 0xfc, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x15, 0x55, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x03, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x0b, 0xff, 0xff, 0xd0, 0x02, 0xff, 0xff, 
  0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xbf, 0xff, 
  0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 0xf4, 0x00, 0x7f, 0xff, 
  0xff, 0xfe, 0xaa, 0xbf, 0xff, 0xff, 0xfe, 0xaa, 0xbf, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_A = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_A_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_AM
#define LV_ATTRIBUTE_IMG_GPA_AM
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_AM uint8_t GPA_AM_map[] = {
  0xe1, 0xfa, 0xfd, 0xff, 	/*Color of index 0*/
  0x97, 0xee, 0xfb, 0xff, 	/*Color of index 1*/
  0x6d, 0xe6, 0xfa, 0xff, 	/*Color of index 2*/
  0x3b, 0xd9, 0xf8, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0x05, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x07, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x0f, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf4, 0x0f, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0x80, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x2f, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x3f, 0xc0, 0x3f, 0xd9, 0x99, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x26, 0x50, 0x2f, 0xc0, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xea, 0xaa, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x55, 0x50, 0x0b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x01, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x02, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x03, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x03, 0xff, 0xfd, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x5b, 0xff, 0xfe, 0x56, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_AM = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_AM_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_AP
#define LV_ATTRIBUTE_IMG_GPA_AP
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_AP uint8_t GPA_AP_map[] = {
  0xe1, 0xfa, 0xfd, 0xff, 	/*Color of index 0*/
  0x9b, 0xef, 0xfb, 0xff, 	/*Color of index 1*/
  0x6f, 0xe6, 0xfa, 0xff, 	/*Color of index 2*/
  0x3b, 0xd9, 0xf8, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x40, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x80, 0x7f, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0xd0, 0x7f, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0x41, 0xe0, 0x3f, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0x02, 0xf0, 0x2f, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xfe, 0x03, 0xf0, 0x0f, 0xf9, 0x54, 0x01, 0x55, 0xff, 
  0xff, 0xfd, 0x03, 0xf4, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xfc, 0x07, 0xf8, 0x0b, 0xf4, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xf8, 0x06, 0x64, 0x07, 0xfe, 0xed, 0x07, 0xbf, 0xff, 
  0xff, 0xf4, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x02, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xe0, 0x15, 0x55, 0x01, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0x00, 0xff, 0xfe, 0x07, 0xff, 0xff, 
  0xff, 0xc0, 0x3f, 0xff, 0x40, 0xbf, 0xfe, 0x4b, 0xff, 0xff, 
  0xff, 0x80, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x40, 0xbf, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x95, 0xff, 0xff, 0xe5, 0xaf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_AP = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_AP_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_B
#define LV_ATTRIBUTE_IMG_GPA_B
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_B uint8_t GPA_B_map[] = {
  0xe2, 0xf4, 0xfc, 0xff, 	/*Color of index 0*/
  0xa3, 0xdd, 0xf9, 0xff, 	/*Color of index 1*/
  0x65, 0xc6, 0xf6, 0xff, 	/*Color of index 2*/
  0x33, 0xa9, 0xf4, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf6, 0x66, 0x66, 0x66, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xe8, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x80, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x80, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x80, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x99, 0x80, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xfe, 0x40, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xd0, 0x02, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xd0, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x40, 0x02, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0x66, 0x50, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0x6f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_B = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_B_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_BM
#define LV_ATTRIBUTE_IMG_GPA_BM
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_BM uint8_t GPA_BM_map[] = {
  0xe0, 0xf1, 0xfc, 0xff, 	/*Color of index 0*/
  0xa1, 0xd4, 0xf8, 0xff, 	/*Color of index 1*/
  0x62, 0xb6, 0xf5, 0xff, 	/*Color of index 2*/
  0x2f, 0x93, 0xf2, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x01, 0x54, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xd0, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x01, 0x98, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x01, 0xa9, 0x40, 0x2f, 0x40, 0x01, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xe0, 0x1f, 0x40, 0x01, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xf0, 0x0f, 0x40, 0x01, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xf4, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x02, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x10, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xbb, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_BM = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_BM_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_BP
#define LV_ATTRIBUTE_IMG_GPA_BP
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_BP uint8_t GPA_BP_map[] = {
  0xdf, 0xf6, 0xfd, 0xff, 	/*Color of index 0*/
  0x9a, 0xe4, 0xfa, 0xff, 	/*Color of index 1*/
  0x67, 0xd6, 0xf8, 0xff, 	/*Color of index 2*/
  0x37, 0xc1, 0xf6, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0xaf, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xa0, 0x07, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0xc0, 0x3f, 0xf8, 0x07, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xf8, 0x07, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0xc0, 0x3f, 0xf4, 0x0b, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0x90, 0x0f, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x7f, 0xf5, 0x54, 0x05, 0x56, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x6f, 0xe0, 0x00, 0x00, 0x02, 0xff, 
  0xff, 0xc0, 0x11, 0x00, 0x0b, 0xe0, 0x00, 0x00, 0x02, 0xff, 
  0xff, 0x80, 0x3f, 0xf8, 0x03, 0xfb, 0xb8, 0x0e, 0xef, 0xff, 
  0xff, 0xc0, 0x3f, 0xfd, 0x02, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfe, 0x01, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfc, 0x02, 0xff, 0xfc, 0x0f, 0xff, 0xff, 
  0xff, 0xc0, 0x26, 0x50, 0x03, 0xff, 0xfd, 0x1f, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xd5, 0x55, 0x6b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_BP = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_BP_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_C
#define LV_ATTRIBUTE_IMG_GPA_C
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_C uint8_t GPA_C_map[] = {
  0xe1, 0xec, 0xfc, 0xff, 	/*Color of index 0*/
  0xa6, 0xc6, 0xf7, 0xff, 	/*Color of index 1*/
  0x5a, 0x94, 0xf2, 0xff, 	/*Color of index 2*/
  0x29, 0x69, 0xf0, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x94, 0x01, 0xaf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x06, 0xb9, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x00, 0x7f, 0xff, 0xd2, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x40, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0xbf, 0xff, 0xe4, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x1f, 0xfe, 0x40, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xf4, 0x00, 0x00, 0x50, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x40, 0x00, 0x5f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfa, 0xab, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_C = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_C_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_CM
#define LV_ATTRIBUTE_IMG_GPA_CM
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_CM uint8_t GPA_CM_map[] = {
  0xdf, 0xe7, 0xfb, 0xff, 	/*Color of index 0*/
  0x5e, 0x89, 0xf1, 0xff, 	/*Color of index 1*/
  0x27, 0x58, 0xef, 0xff, 	/*Color of index 2*/
  0xae, 0xc4, 0xf7, 0xff, 	/*Color of index 3*/

  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xa7, 0xff, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0x70, 0x00, 0x36, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa9, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa4, 0x00, 0xfc, 0x0e, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa0, 0x0d, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x90, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x80, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x80, 0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x40, 0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x40, 0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xc0, 0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x40, 0xea, 0xaa, 0xaa, 0x40, 0x00, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x40, 0xea, 0xaa, 0xaa, 0x40, 0x00, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x80, 0x2a, 0xaa, 0xaa, 0x80, 0x00, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xb0, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0x90, 0x06, 0xaa, 0x9a, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa0, 0x01, 0xa9, 0xc2, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa4, 0x00, 0x30, 0x03, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xa9, 0x00, 0x00, 0x02, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xb0, 0x00, 0x3a, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xa9, 0xdd, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
};

const lv_img_dsc_t GPA_CM = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_CM_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_CP
#define LV_ATTRIBUTE_IMG_GPA_CP
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_CP uint8_t GPA_CP_map[] = {
  0xe1, 0xee, 0xfc, 0xff, 	/*Color of index 0*/
  0x99, 0xc7, 0xf7, 0xff, 	/*Color of index 1*/
  0x51, 0x9d, 0xf3, 0xff, 	/*Color of index 2*/
  0x2c, 0x7d, 0xf1, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe8, 0x01, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x40, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf4, 0x00, 0x55, 0x07, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xe0, 0x07, 0xff, 0x5f, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xd0, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xc0, 0x2f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0x40, 0x7f, 0xff, 0xff, 0xfa, 0xa8, 0x0a, 0xab, 0xff, 
  0xff, 0x40, 0x7f, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x02, 0xff, 
  0xff, 0x40, 0xbf, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0x40, 0x7f, 0xff, 0xff, 0xe5, 0x54, 0x05, 0x57, 0xff, 
  0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xc0, 0x2f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xd0, 0x0b, 0xff, 0xdb, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xf0, 0x02, 0xba, 0x07, 0xff, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xfe, 0xaf, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_CP = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_CP_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_D
#define LV_ATTRIBUTE_IMG_GPA_D
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_D uint8_t GPA_D_map[] = {
  0xe2, 0xe5, 0xfb, 0xff, 	/*Color of index 0*/
  0xb1, 0xb9, 0xf6, 0xff, 	/*Color of index 1*/
  0x72, 0x81, 0xf1, 0xff, 	/*Color of index 2*/
  0x25, 0x41, 0xee, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfa, 0xaa, 0xaa, 0xaf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0xee, 0x90, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xf9, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x40, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xc0, 0x02, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf4, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf4, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf4, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf4, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xd0, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x01, 0xff, 0xe4, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x44, 0x00, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x1a, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_D = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_D_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_DP
#define LV_ATTRIBUTE_IMG_GPA_DP
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_DP uint8_t GPA_DP_map[] = {
  0xde, 0xe3, 0xfb, 0xff, 	/*Color of index 0*/
  0x8e, 0xa3, 0xf4, 0xff, 	/*Color of index 1*/
  0x44, 0x67, 0xef, 0xff, 	/*Color of index 2*/
  0x26, 0x4a, 0xef, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xd5, 0x55, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x15, 0x00, 0x0b, 0xff, 0xff, 0x07, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xa0, 0x07, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xf8, 0x02, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfd, 0x01, 0xff, 0xff, 0x07, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfe, 0x00, 0xfe, 0xaa, 0x02, 0xaa, 0xff, 
  0xff, 0x80, 0x3f, 0xff, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xbf, 
  0xff, 0x80, 0x3f, 0xff, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xbf, 
  0xff, 0x80, 0x3f, 0xfe, 0x00, 0xf9, 0x55, 0x01, 0x55, 0xbf, 
  0xff, 0x80, 0x3f, 0xfe, 0x00, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfd, 0x01, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xfc, 0x01, 0xff, 0xff, 0x07, 0xff, 0xff, 
  0xff, 0x80, 0x3f, 0xe4, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0x80, 0x2a, 0x40, 0x0b, 0xff, 0xff, 0x07, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xab, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_DP = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_DP_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_EX
#define LV_ATTRIBUTE_IMG_GPA_EX
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_EX uint8_t GPA_EX_map[] = {
  0xe5, 0xe4, 0xf9, 0xff, 	/*Color of index 0*/
  0xa8, 0xa8, 0xee, 0xff, 	/*Color of index 1*/
  0x68, 0x6b, 0xe3, 0xff, 	/*Color of index 2*/
  0x33, 0x41, 0xdd, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe5, 0x55, 0x55, 0x6f, 0x95, 0xbf, 0xfd, 0x57, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0x2f, 0x40, 0x3f, 0xf8, 0x07, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0x2f, 0xc0, 0x2f, 0xf0, 0x0b, 0xff, 
  0xff, 0xd0, 0x05, 0x55, 0x6f, 0xe0, 0x0f, 0xe0, 0x1f, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xf4, 0x0b, 0xd0, 0x3f, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xf8, 0x03, 0x80, 0x7f, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xfd, 0x02, 0x40, 0xff, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0xbf, 0xff, 0x40, 0x03, 0xff, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x0b, 0xff, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0xbf, 0xff, 0x80, 0x0b, 0xff, 0xff, 
  0xff, 0xd0, 0x1e, 0xaa, 0xff, 0xff, 0x40, 0x03, 0xff, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xfe, 0x00, 0x02, 0xff, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xfd, 0x03, 0x00, 0xff, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xf8, 0x07, 0x40, 0x7f, 0xff, 
  0xff, 0xd0, 0x2f, 0xff, 0xff, 0xf0, 0x0f, 0xc0, 0x3f, 0xff, 
  0xff, 0xd0, 0x1a, 0xaa, 0xaf, 0xe0, 0x1f, 0xd0, 0x1f, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0x1f, 0xc0, 0x3f, 0xf0, 0x0b, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0x1f, 0x40, 0x7f, 0xf4, 0x07, 0xff, 
  0xff, 0xd0, 0x00, 0x00, 0x0f, 0x00, 0xff, 0xfc, 0x02, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_EX = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_EX_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_F
#define LV_ATTRIBUTE_IMG_GPA_F
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_F uint8_t GPA_F_map[] = {
  0xe4, 0xe4, 0xf9, 0xff, 	/*Color of index 0*/
  0x93, 0x94, 0xea, 0xff, 	/*Color of index 1*/
  0x72, 0x74, 0xe5, 0xff, 	/*Color of index 2*/
  0x33, 0x41, 0xdd, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x55, 0x55, 0x55, 0x55, 0x5f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0a, 0xaa, 0xaa, 0xaf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_F = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_F_map,
};

#ifndef LV_ATTRIBUTE_IMG_GPA_W
#define LV_ATTRIBUTE_IMG_GPA_W
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_GPA_W uint8_t GPA_W_map[] = {
  0xe6, 0xe5, 0xf9, 0xff, 	/*Color of index 0*/
  0xa7, 0xa7, 0xed, 0xff, 	/*Color of index 1*/
  0x6e, 0x71, 0xe4, 0xff, 	/*Color of index 2*/
  0x33, 0x41, 0xdd, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfd, 0x55, 0xbf, 0xff, 0xf5, 0x57, 0xff, 0xff, 0x95, 0x6f, 
  0xfc, 0x00, 0x3f, 0xff, 0xe0, 0x02, 0xff, 0xff, 0x00, 0x1f, 
  0xfd, 0x00, 0x2f, 0xff, 0xd0, 0x01, 0xff, 0xfe, 0x00, 0x2f, 
  0xfd, 0x00, 0x2f, 0xff, 0xd0, 0x01, 0xff, 0xfe, 0x00, 0x2f, 
  0xfe, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0xff, 0xfe, 0x00, 0x3f, 
  0xfe, 0x00, 0x1f, 0xff, 0x80, 0x00, 0xbf, 0xfd, 0x00, 0x3f, 
  0xff, 0x00, 0x0f, 0xff, 0x80, 0x00, 0xbf, 0xfd, 0x00, 0x7f, 
  0xff, 0x40, 0x0f, 0xff, 0x40, 0x00, 0x7f, 0xfc, 0x00, 0x7f, 
  0xff, 0x40, 0x0f, 0xff, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0xbf, 
  0xff, 0x80, 0x0b, 0xfe, 0x00, 0x40, 0x2f, 0xf8, 0x00, 0xbf, 
  0xff, 0x80, 0x0b, 0xfe, 0x00, 0x80, 0x2f, 0xf8, 0x00, 0xff, 
  0xff, 0xc0, 0x07, 0xfd, 0x01, 0xc0, 0x1f, 0xf4, 0x01, 0xff, 
  0xff, 0xc0, 0x07, 0xfc, 0x01, 0xc0, 0x0f, 0xf4, 0x01, 0xff, 
  0xff, 0xd0, 0x03, 0xfc, 0x02, 0xd0, 0x0b, 0xf0, 0x02, 0xff, 
  0xff, 0xd0, 0x03, 0xf8, 0x03, 0xd0, 0x0b, 0xf0, 0x02, 0xff, 
  0xff, 0xe0, 0x02, 0xf4, 0x03, 0xe0, 0x07, 0xe0, 0x03, 0xff, 
  0xff, 0xf0, 0x02, 0xf4, 0x07, 0xf0, 0x07, 0xe0, 0x03, 0xff, 
  0xff, 0xf0, 0x01, 0xf0, 0x07, 0xf0, 0x03, 0xd0, 0x07, 0xff, 
  0xff, 0xf4, 0x01, 0xe0, 0x0b, 0xf4, 0x02, 0xd0, 0x07, 0xff, 
  0xff, 0xf4, 0x00, 0xe0, 0x0f, 0xf8, 0x02, 0xc0, 0x0b, 0xff, 
  0xff, 0xf8, 0x00, 0xd0, 0x0f, 0xf8, 0x01, 0xc0, 0x0f, 0xff, 
  0xff, 0xf8, 0x00, 0x90, 0x1f, 0xfc, 0x00, 0xc0, 0x0f, 0xff, 
  0xff, 0xfc, 0x00, 0x80, 0x2f, 0xfd, 0x00, 0x80, 0x1f, 0xff, 
  0xff, 0xfd, 0x00, 0x40, 0x2f, 0xfd, 0x00, 0x40, 0x1f, 0xff, 
  0xff, 0xfd, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x2f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x2f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x40, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0xbf, 0xff, 0x40, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0x40, 0x00, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0x40, 0x00, 0xff, 0xff, 0x80, 0x00, 0xbf, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t GPA_W = {
  {
    LV_IMG_CF_INDEXED_2BIT,
    0,
    0,
    40,
    40,
  },
  416,
  GPA_W_map,
};

#endif